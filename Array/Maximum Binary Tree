https://leetcode.com/problems/maximum-binary-tree/

************************************************SOLUTION*******************************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* helper(vector<int>& nums , int startIndex, int endIndex)
    {
        if(startIndex > endIndex)
            return NULL;
        else
        {
            int max = INT_MIN;
            int root_index;
            for(int i = startIndex; i <= endIndex; i++)
            {
                if(max < nums[i])
                {
                    max = nums[i];
                    root_index = i;
                }
                    
            }
            TreeNode* newTree = new TreeNode(max);
            newTree->left = helper(nums, startIndex, root_index - 1);
            newTree->right = helper(nums, root_index + 1, endIndex);
            return newTree;
            
        }
    }
    
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) 
    {
        int size = nums.size();
        return helper(nums , 0, size -1);
    }
};
