https://leetcode.com/problems/deepest-leaves-sum/

**************************************SOLUTION**************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) 
    {
        if(root == NULL)
            return 0;
        else
        {
            int leftDepth = maxDepth(root->left);
            int rightDepth = maxDepth(root->right);
            return 1 + max(leftDepth , rightDepth);
        }
    }
    int deepestLeavesSum(TreeNode* root) 
    {
        int maxDepth_of_tree = maxDepth(root);
        int currentDepth = 0;
        queue<TreeNode*> pendingQueue;
        pendingQueue.push(root);
        pendingQueue.push(NULL);
        while(!pendingQueue.empty())
        {
            TreeNode *front = pendingQueue.front();
            pendingQueue.pop();
            if(front == NULL && !pendingQueue.empty())
            {
                currentDepth++;
                if(currentDepth == maxDepth_of_tree - 1)
                {
                    break;
                }
                else
                {
                    pendingQueue.push(NULL);
                }
            }
            else
            {
                if(front->left != NULL)
                    pendingQueue.push(front->left);
                if(front->right != NULL)
                    pendingQueue.push(front->right);
            }
        }
        
        int sum = 0;
        while(!pendingQueue.empty())
        {
            TreeNode *front = pendingQueue.front();
            sum = sum + (front->val);
            pendingQueue.pop();
        }
        return sum;
    }
};
