https://leetcode.com/problems/recover-binary-search-tree/

****************************************SOLUTION************************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorder_vec;
    
    void inorder(TreeNode* root)
    {
        if(root == NULL)
            return;
        else
        {
            inorder(root->left);
            inorder_vec.push_back(root->val);
            inorder(root->right);
        }
    }
    
    void modifyTree(TreeNode* root)
    {
        if(root == NULL)
            return;
        else
        {
            modifyTree(root->left);
            root->val = inorder_vec[0];
            inorder_vec.erase(inorder_vec.begin());
            modifyTree(root->right);
        }
    }
    
    void recoverTree(TreeNode* root) 
    {
        inorder(root);
        sort(inorder_vec.begin(),inorder_vec.end());
        modifyTree(root);
    }
};
