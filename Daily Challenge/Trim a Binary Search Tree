https://leetcode.com/problems/trim-a-binary-search-tree/

************************************SOLUTION*************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) 
    {
        if(root == NULL)
            return NULL;
        else
        {
            if(root->val >= low && root->val <= high)
            {
                //take root
                if(low == high)
                {
                    //only take the root element and remove the left and right child
                    root->left = NULL;
                    root->right = NULL;
                }
                else
                {
                    root->left = trimBST(root->left , low , high);
                    root->right = trimBST(root->right , low , high);
                }
            }
            else
            {
                if(root->val < low)
                {
                    //remove left part
                    root->left = NULL;
                    root = trimBST(root->right , low , high);
                }
                else
                {
                    //remove right part
                    root->right = NULL;
                    root = trimBST(root->left , low , high);
                }
            }
        }
        return root;
    }
};
