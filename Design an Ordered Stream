https://leetcode.com/problems/design-an-ordered-stream/

***********************************************************SOLUTION****************************************************

class OrderedStream {
public:
    int pointer = 1;
    int size_hashMap;
    map<int, string> m;
    OrderedStream(int n) 
    {
        this->size_hashMap = n;
    }
    
    vector<string> insert(int idKey, string value) 
    {
        vector<string> result;
        m[idKey] = value;
        if(pointer < idKey)
        {
            return result;
            
        }
        if(idKey == pointer)
        {
            for(int i = idKey; i <= size_hashMap; i++)
            {
                if(m.count(i) > 0)
                {
                    result.push_back(m[i]);
                    pointer++;
                }
                else
                {
                    break;
                    
                }
            }
            
        }
        
        return result;
    }
};

/**
 * Your OrderedStream object will be instantiated and called as such:
 * OrderedStream* obj = new OrderedStream(n);
 * vector<string> param_1 = obj->insert(idKey,value);
 */
